{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "63cdb813",
   "metadata": {},
   "outputs": [],
   "source": [
    "from classiq import *\n",
    "\n",
    "\n",
    "\n",
    "beta_dict = {0:7, 1:6, 2:5, 3:4, 4:15, 5:1, 6:6, 7:2}\n",
    "beta_array = CArray([(key, value) for key, value in beta_dict.items()])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "@qfunc\n",
    "def state_preparation(j: QNum, r: CInt, beta: CArray[CInt, CInt]):\n",
    "    \n",
    "    beta_dict = {key: value for key, value in beta}\n",
    "    #first step\n",
    "    key = int(j, 2)\n",
    "    betaj = beta_dict[key]\n",
    "    \n",
    "    #BetaMax\n",
    "    for value in beta_dict:\n",
    "        if value >= betaj:\n",
    "            betamax = value\n",
    "            \n",
    "    #betabar = (2**r)*(betaj/betamax)        \n",
    "    deci = betaj/betamax\n",
    "    \n",
    "    fraction = deci * (2**r)\n",
    "    \n",
    "    #Get the integer part\n",
    "    integer_part = int(fraction)\n",
    "    \n",
    "    #binary\n",
    "    betabar = bin(integer_part)[2:]\n",
    "\n",
    "    \n",
    "    n = 0\n",
    "    for i in betabar:\n",
    "        if i == \"1\":\n",
    "            X(n)\n",
    "            n += 1\n",
    "        else:\n",
    "            n += 1\n",
    "            \n",
    "            \n",
    "            \n",
    "            \n",
    "#step 2 adding H to ancillas equal_superposition\n",
    "\n",
    "@qfunc\n",
    "def main(j: QNum, r: CInt, beta: CArray[CInt, CInt], x: Output[QBit]):\n",
    "    \n",
    "    #beta\n",
    "    allocate(r, beta)\n",
    "    \n",
    "    #anicilla\n",
    "    allocate(r, cntrl)\n",
    "    \n",
    "    # Apply H gate to the first qubit\n",
    "    for i in range(r):\n",
    "        H(i)\n",
    "    \n",
    "    allocate(1, target)\n",
    "    \n",
    "    \n",
    "    #again beta\n",
    "    beta_dict = {key: value for key, value in beta}\n",
    "    \n",
    "    key = int(j, 2)\n",
    "    betaj = beta_dict[key]\n",
    "    \n",
    "    #BetaMax\n",
    "    for value in beta_dict:\n",
    "        if value >= betaj:\n",
    "            betamax = value\n",
    "            \n",
    "    #betabar = (2**r)*(betaj/betamax)        \n",
    "    deci = betaj/betamax\n",
    "    \n",
    "    fraction = deci * (2**r)\n",
    "    \n",
    "    #Get the integer part\n",
    "    integer_part = int(fraction)\n",
    "    \n",
    "    #binary\n",
    "    betabar = bin(integer_part)[2:]\n",
    "    \n",
    "    #betabar Oracle\n",
    "    X(beta)\n",
    "    \n",
    "    #inequality test\n",
    "    for i in range(integer_part: 2**r):\n",
    "        control(ctrl=controller == int(bin(i)[2:]), stmt_block=lambda: X(target))\n",
    "        \n",
    "        \n",
    "    \n",
    "    #revers of H\n",
    "    for i in range(r):\n",
    "        H(i)\n",
    "    \n",
    "    \n",
    "    #reverse betabar Oracle\n",
    "    X(beta)    \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e285c2b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Hamiltonian Simulation\n",
    "#BuildingBlockB\n",
    "\n",
    "#go through the Matrix, get the matrix element, turn into a quantum state\n",
    "@qfunc\n",
    "def Oracle_S(l: QNum, j: QNum, Matrix: CArray[CArray[CReal]]):\n",
    "    \n",
    "    #turn j, l into decimal\n",
    "    jdeci = int(str(j), 2)\n",
    "    ldeci = int(str(l), 2)\n",
    "    \n",
    "    a = Matrix[jdeci][ldeci]\n",
    "    \n",
    "    if a != 0:\n",
    "        ajl = bin(a)[2:]\n",
    "        n = len(ajl)\n",
    "        allocate(n)\n",
    "        num = 0\n",
    "        \n",
    "        for i in ajl:\n",
    "            if i == 1:\n",
    "                X(num)\n",
    "                num += 1\n",
    "            else:\n",
    "                num += 1\n",
    "\n",
    "                \n",
    "\n",
    "\n",
    "#if we do have X as the position Matrix, K as kappa(SpringConstant) Matrix, and M as mass Matrix\n",
    "@qfunc\n",
    "def main(j: QNum, n: CInt,, r: CInt, d: CInt, X: CArray[CArray[CReal]], K: CArray[CArray[CReal]], M: CArray[CArray[CReal]], x: Output[QBit]):\n",
    "    \n",
    "    #Step one to creat the l superposition\n",
    "    allocate(r, beta)\n",
    "    for i in range(d):\n",
    "        H(i)\n",
    "    \n",
    "    #Step 2 and 3\n",
    "    for i in range(d):\n",
    "        l = bin(a)[2:]\n",
    "        x = Oracle_S(l, j, X)\n",
    "        k = Oracle_S(l, j, K)\n",
    "        m = Oracle_S(j, j, M)\n",
    "        \n",
    "    #Step 4 \n",
    "    allocate(r, ancilla)\n",
    "    for i in range(r):\n",
    "        H(i)\n",
    "        \n",
    "    #Step 5\n",
    "    kappa_max = 0\n",
    "    for row in K:\n",
    "        for element in row:\n",
    "            if element >= kappa_max:\n",
    "                kappa_max = element\n",
    "    \n",
    "    m_max = 0\n",
    "    for row in M:\n",
    "        for element in row:\n",
    "            if element >= m_max:\n",
    "                m_max = element\n",
    "    \n",
    "\n",
    "    # Define quantum variables\n",
    "    x = X[j][l]\n",
    "    kappa_jk = K[j][l]\n",
    "    m_j = M[j][j]\n",
    "\n",
    "    # 1. Compute the square of x\n",
    "    x_squared = square(x)\n",
    "\n",
    "    # 2. Perform the necessary multiplications\n",
    "    left_hand_side = multiply(kappa_max, kappa_jk)\n",
    "    left_hand_side = multiply(left_hand_side, 2**r_kappa)\n",
    "\n",
    "    right_hand_side = multiply(m_max, m_j)\n",
    "    right_hand_side = multiply(right_hand_side, 2**r_m)\n",
    "    right_hand_side = multiply(x_squared, 2**(2*r_kappa))\n",
    "    \n",
    "    allocate(1, target)\n",
    "    \n",
    "    if left_hand_side >= right_hand_side:\n",
    "        X[target]\n",
    "    \n",
    "    \n",
    "    #Step 6\n",
    "    for i in range(d):\n",
    "        l = bin(a)[2:]\n",
    "        Oracle_S(l, j, K)\n",
    "        Oracle_S(j, j, M)\n",
    "        \n",
    "        \n",
    "    #Step 7\n",
    "    jdeci = int(str(j), 2)\n",
    "    xdeci = int(str(x), 2)\n",
    "    if jdeci < xdeci:\n",
    "        for i in j:\n",
    "            for p in x:\n",
    "                qc.qiskit.circuit.library.CSwapGate(target, i, p)\n",
    "        \n",
    "        \n",
    "    #Step 8 \n",
    "    H(target)\n",
    "    Z(target)\n",
    "\n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
